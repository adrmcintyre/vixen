vixen:
    ideas for instructions:
        NEG r_dst, r_src                - r_dst = -r_src
        MVL r_dst, r_src                - r_dst = r_src & 0x00ff
        LDW/STW r_dst, [r_src, #off]    - offset is doubled giving 0..62 reach, in two byte intervals
        LDB/STB r_dst, [r_src, #off]    - offset is not doubled, giving 0..31 reach
        MOV r_dst, r_src                - set N,Z flags
        SWI #num8                       - software interrupt - we need a shadow link register at least
        LSL/LSR/ASR r_dst, #0           - can be stolen

    many instructions with r_dst=R15 can be stolen - gets us around 24*16 = 384 encodings


video:

clock:
    Right now we're running everything off the ECP5's external 25MHz clock.
    Should try using the PLL to generate a faster internal clock, just as
    we're already doing for the video.

asm.pl:
    * Implement textual macros
        * Where could they appear?
        * Easiest: anywhere an instruction can.
        * Pure textual substitution (with args)
        * Could just fall back on cpp preprocessor.
        * Example:
            macro add3(x, y, z)
                mov x, y
                add x, z
            endmacro
            ...

            add3 r1, r2, r3

video code:
    reverse pattern
    apply pattern differently for stretched modes?
    fast mode for horiz/vert lines

    provide:
        option to draw last point
        point
        fill rect
